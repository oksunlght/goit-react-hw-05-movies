{"version":3,"file":"static/js/697.b3f3232e.chunk.js","mappings":"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","sources":["components/Reviews.styled.jsx","components/Reviews.jsx","utils/fetch-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin-left: 20px;\n`;\n\nexport const Author = styled.span`\n  font-weight: 700;\n`;\n\nexport const Review = styled.p`\n  margin-top: 15px;\n  font-size: 14px;\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Marker = styled.span`\n  margin-right: 3px;\n`;\n\nexport const NoReview = styled.p`\n  margin-left: 20px;\n`;\n\nexport const Loader = styled.div`\n  margin-left: 20px;\n  margin-top: 50px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../utils/fetch-api';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport {\n  List,\n  Author,\n  Review,\n  Item,\n  Marker,\n  NoReview,\n  Loader,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchReviews(movieId)\n      .then(({ results }) => {\n        setReviews(results);\n        setIsLoading(false);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      {!isLoading ? (\n        <>\n          {reviews.length !== 0 ? (\n            <List>\n              {reviews.map(({ id, author, content }) => {\n                return (\n                  <Item key={id}>\n                    <Marker>&#8226;</Marker>\n                    <Author>Author: {author}</Author>\n                    <Review>{content}</Review>\n                  </Item>\n                );\n              })}\n            </List>\n          ) : (\n            <NoReview>We don't have any reviews for this movie.</NoReview>\n          )}\n        </>\n      ) : (\n        <Loader>\n          <ThreeCircles\n            height=\"100\"\n            width=\"100\"\n            color=\"orangered\"\n            visible={true}\n          />\n        </Loader>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = '59106e174e5800a0537739a6d2a5791b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst params = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const fetchMoviesList = () => {\n  const url = `${BASE_URL}/trending/movie/day?${params}`;\n  return fetch(url)\n    .then(r => r.json())\n    .then(res => res.results)\n    .catch(error => console.log(error));\n};\n\nexport const fetchMovieDetails = id => {\n  const url = `${BASE_URL}/movie/${id}?${params}`;\n\n  return fetch(url)\n    .then(r => r.json())\n    .then(res => res)\n    .catch(error => console.log(error));\n};\n\nexport const fetchCast = id => {\n  const url = `${BASE_URL}/movie/${id}/credits?${params}`;\n\n  return fetch(url)\n    .then(r => r.json())\n    .then(res => res)\n    .catch(error => console.log(error));\n};\n\nexport const fetchReviews = id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?${params}`;\n\n  return fetch(url)\n    .then(r => r.json())\n    .then(res => res)\n    .catch(error => console.log(error));\n};\n\nexport const fetchMoviesOnSearch = query => {\n  const url = `${BASE_URL}/search/movie?query=${query}&${params}`;\n\n  return fetch(url)\n    .then(r => r.json())\n    .then(res => res)\n    .catch(error => console.log(error));\n};\n\nexport const setImageURL = path => {\n  const url = `https://image.tmdb.org/t/p/w500/${path}`;\n  return url;\n};\n"],"names":["List","styled","Author","Review","Item","Marker","NoReview","Loader","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchReviews","then","results","catch","error","console","log","height","width","color","visible","length","map","id","author","content","BASE_URL","params","URLSearchParams","api_key","fetchMoviesList","url","fetch","r","json","res","fetchMovieDetails","fetchCast","fetchMoviesOnSearch","query","setImageURL","path"],"sourceRoot":""}